#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('mongoose:server');
var http = require('http');
const request = require('../utils/requestClient');
const strRandom = require("string-random")
const redis = require("../config/redis");
const cron = require("node-cron");

/**
 * Get app info
 */
function getOpenApiInfo(){
  // 获取升级包信息
  request.post("/snsapi/ver/query",{
    noncestr: strRandom(10)
  },(err,response,body) => {
    if(err){
      console.log("请求升级包错误：" + err)
    }else{
      
      if (response.statusCode === 200 && body.code === 200){
        redis.client.get(redis.lastVersion,(err,value) => {
          const version = Number(value)

          let maxVersion = 0;
          for (const iterator of body.data) {
            if (iterator.ts > maxVersion){
              maxVersion = iterator.ts;
            }
          }
  
          const lastVersion = maxVersion
          // 如果读取到新配置就更新数据
          
          if (!Number.isInteger(version) || lastVersion > version){
            console.log("更新包配置：" + JSON.stringify(body.data))
            redis.client.set(redis.lastVersion,lastVersion)
            redis.client.set(redis.lastKey,JSON.stringify(body.data))
          }
        })
        
      }
      //console.log("ver-query: " + JSON.stringify(body))
    }
  });

  // 获取H5域名
  request.post("/snsapi/ver/query/domain",{
    noncestr: strRandom(10)
  },(err,response,body) => {
    if(err){
      console.log("请求H5域名错误：" + err)
    }else{
      
      if (response.statusCode === 200 && body.code === 200){
        if (body.data.length > 0){
          redis.client.set(redis.h5Domain,body.data[0].domain)
        }
      }
      //console.log("ver-query: " + JSON.stringify(body))
    }
  });

  // 同步所有落地页域名数据
  request.post("/snsapi/ver/query/domain",{
    noncestr: strRandom(10),
    type: 11
  },(err,response,body) => {
    if(err){
      console.log("请求落地页域名错误：" + err)
    }else{
      
      if (response.statusCode === 200 && body.code === 200){
        
        const urls = [];
        for (const iterator of body.data) {
          urls.push(iterator.domain)
        }
        // 取并集存储
        redis.client.sinterstore(redis.downDomains, urls)
        // 在存储新增的
        redis.client.sadd(redis.downDomains, urls)

        //if (body.data.length > 0){
        //  redis.client.set(redis.downDomains,body.data[0].domain)
        //}
      }
      //console.log("ver-query: " + JSON.stringify(body))
    }
  });
}
// 每两秒同步配置
var task = cron.schedule('*/3 * * * * *', () =>  {
  getOpenApiInfo();
});

getOpenApiInfo();


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
